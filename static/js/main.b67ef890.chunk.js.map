{"version":3,"sources":["TestData.ts","components/Chat/Preview/Item/Avatar/Avatar.tsx","components/Chat/Preview/Item/Item.tsx","components/Chat/Preview/Preview.tsx","components/Chat/Screen/Message/Message.tsx","components/Chat/Chat.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getRandomUsers","usersAmount","Math","ceil","random","url","fetch","then","res","json","results","generateMessage","user","rndMsgs","a","message","floor","length","icon","picture","thumbnail","author","name","last","first","date","start","Date","end","getTime","generateGroupChat","users","messages","messagesAmount","rndUsers","Object","assign","count","usrId","push","splice","id","shortid","generate","sort","b","generateChatData","chatsAmount","chats","Avatar","avatarUrl","userName","className","src","alt","Item","isActive","selectItem","onClick","toLocaleDateString","replace","Preview","data","activeItemId","map","itemData","key","Message","Chat","state","activeChatId","selectChat","chatId","setState","preparePreviewData","chat","this","activeChat","find","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.b67ef890.chunk.js","sourcesContent":["import { IChatGroup } from \"./components/Chat/types\";\nimport { IMessage } from \"./components/Chat/Screen/Message/types\";\nimport shortid from \"shortid\";\n\nconst randomDate = (start: Date, end: Date) => {\n    return new Date(\n        start.getTime() + Math.random() * (end.getTime() - start.getTime())\n    );\n};\n\nexport interface IRandomUserName {\n    title: string;\n    first: string;\n    last: string;\n}\n\nexport interface IRandomUserIcon {\n    large: string;\n    medium: string;\n    thumbnail: string;\n}\n\nexport interface IRandomUser {\n    name: IRandomUserName;\n    picture: IRandomUserIcon;\n}\n\nconst getRandomUsers = () => {\n    const usersAmount = Math.ceil(Math.random() * 10);\n    const url = `https://randomuser.me/api/?results=${usersAmount}&inc=name,picture&noinfo`;\n    return fetch(url)\n        .then((res) => res.json())\n        .then((json) => json.results);\n};\n\nconst generateMessage = async (\n    user: IRandomUser,\n    rndMsgs: string[]\n): Promise<IMessage> => {\n    const message = rndMsgs[Math.floor(Math.random() * rndMsgs.length)];\n    return {\n        icon: user.picture.thumbnail,\n        author: `${user.name.last} ${user.name.first}`,\n        message: message,\n        date: randomDate(new Date(2019, 0, 1), new Date()),\n    };\n};\n\nconst generateGroupChat = async (\n    users: IRandomUser[],\n    rndMsgs: string[]\n): Promise<IChatGroup> => {\n    const messages: IMessage[] = [];\n    const messagesAmount = Math.ceil(25 + Math.random() * 5);\n    let rndUsers = Object.assign([], users);\n    for (let count = 0; count < messagesAmount; count++) {\n        const usrId = Math.floor(Math.random() * rndUsers.length);\n        messages.push(await generateMessage(rndUsers[usrId], rndMsgs));\n        if (rndUsers.length === 1) {\n            rndUsers = Object.assign([], users);\n        } else {\n            rndUsers.splice(usrId, 1);\n        }\n    }\n    return {\n        id: shortid.generate(),\n        name: \"Group Chat\",\n        messages: messages.sort((a, b) => a.date.getTime() - b.date.getTime()),\n    };\n};\n\nconst getRandomText = () => {\n    const url = `https://baconipsum.com/api/?type=all-meat&paras=25&start-with-lorem=1`;\n    return fetch(url)\n        .then((res) => res.json())\n        .then((json) => json);\n};\n\nexport const generateChatData = async (): Promise<IChatGroup[]> => {\n    const rndMsgs = await getRandomText();\n    const users = await getRandomUsers();\n    const chatsAmount = Math.ceil(10 + Math.random() * 10);\n    const chats: IChatGroup[] = [];\n    for (let count = 0; count < chatsAmount; count++) {\n        chats.push(await generateGroupChat(users, rndMsgs));\n    }\n    return chats;\n};\n","import React from \"react\";\nimport \"./Avatar.css\";\n\nexport interface IProps {\n    avatarUrl: string;\n    userName: string;\n}\n\nexport const Avatar: React.FC<IProps> = ({ avatarUrl, userName }) => (\n    <img className=\"chat-preview-item-avatar\" src={avatarUrl} alt={userName} />\n);\n","import React from \"react\";\nimport { Avatar } from \"./Avatar/Avatar\";\nimport { IChatPreviewItem } from \"./types\";\nimport \"./Item.css\";\n\ninterface IProps extends IChatPreviewItem {\n    isActive: boolean;\n    selectItem: () => void;\n}\n\nexport const Item: React.FC<IProps> = ({\n    icon,\n    name,\n    date,\n    author,\n    message,\n    isActive,\n    selectItem,\n}) => {\n    const onClickItem = () => {\n        selectItem();\n    };\n\n    const style = \"flex full-width chat-preview-item \";\n    return (\n        <div\n            className={`${style} ${\n                isActive ? \"chat-preview-item-selected\" : \"\"\n            }`}\n            onClick={onClickItem}\n        >\n            <Avatar avatarUrl={icon} userName={author} />\n            <div className=\"flex-space-between margin-left-8px chat-preview-item-text-container\">\n                <div className=\"flex-space-between margin-top-8px\">\n                    <span className=\"chat-preview-item-name\">{`${name}`}</span>\n                    <span className=\"chat-preview-item-date\">{`${date\n                        .toLocaleDateString(\"ru\")\n                        .replace(/\\./g, \"/\")}`}</span>\n                </div>\n                <div className=\"chat-preview-item-author-message margin-bottom-8px\">\n                    <span className=\"chat-preview-item-author\">{`${author}: `}</span>\n                    <span>{`${message}`}</span>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Item } from \"./Item/Item\";\nimport { IChatPreviewItem } from \"./Item/types\";\nimport \"./Preview.css\";\n\ninterface IProps {\n    data: IChatPreviewItem[];\n    activeItemId: string;\n    selectItem: (itemId: string) => void;\n}\n\nexport const Preview: React.FC<IProps> = ({\n    data,\n    selectItem,\n    activeItemId,\n}) => {\n    const renderItems = () => {\n        return data\n            .sort((a, b) => b.date.getTime() - a.date.getTime())\n            .map((itemData) => (\n                <Item\n                    key={itemData.id}\n                    isActive={itemData.id === activeItemId}\n                    selectItem={() => selectItem(itemData.id)}\n                    {...itemData}\n                />\n            ));\n    };\n    return <div className=\"flex chat-preview-list\">{renderItems()}</div>;\n};\n","import React from \"react\";\nimport { Avatar } from \"../../Preview/Item/Avatar/Avatar\";\nimport { IMessage } from \"./types\";\nimport \"./Message.css\";\n\nexport const Message: React.FC<IMessage> = ({\n    icon,\n    author,\n    message,\n    date,\n}) => {\n    return (\n        <div className=\"flex screen-message-item\">\n            <Avatar avatarUrl={icon} userName={author} />\n            <div className=\"margin-left-8px full-width flex screen-message-text\">\n                <span className=\"chat-preview-item-name\">{`${author}`}</span>\n                <div className=\"margin-top-8px flex-space-between\">\n                    <span>{`${message}`}</span>\n                    <span className=\"chat-preview-item-date\">{`${date\n                        .toLocaleDateString(\"ru\")\n                        .replace(/\\./g, \"/\")}`}</span>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { generateChatData } from \"../../TestData\";\nimport { Preview } from \"./Preview/Preview\";\nimport { Message } from \"./Screen/Message/Message\";\nimport { IChatGroup } from \"./types\";\nimport { IChatPreviewItem } from \"./Preview/Item/types\";\nimport \"./Chat.css\";\n\ninterface IState {\n    chats: IChatGroup[];\n    activeChatId: string;\n}\n\nexport class Chat extends React.Component<{}, IState> {\n    readonly state: IState = {\n        chats: [],\n        activeChatId: \"\",\n    };\n\n    private selectChat = (chatId: string) => {\n        this.setState({ activeChatId: chatId });\n    };\n\n    componentDidMount() {\n        generateChatData().then((chats) => this.setState({ chats: chats }));\n    }\n\n    private preparePreviewData = (): IChatPreviewItem[] => {\n        const { chats } = this.state;\n        return chats.map((chat) => {\n            return {\n                id: chat.id,\n                name: chat.name,\n                ...chat.messages[chat.messages.length - 1],\n            };\n        });\n    };\n\n    render() {\n        const { chats, activeChatId } = this.state;\n        const activeChat = chats.find(({ id }) => id === activeChatId);\n        const messages = activeChat ? activeChat.messages : [];\n\n        return (\n            <div className=\"flex chat\">\n                <Preview\n                    data={this.preparePreviewData()}\n                    activeItemId={activeChatId}\n                    selectItem={this.selectChat}\n                />\n                <div className=\"flex chat-screen\">\n                    {messages.map((message, id) => (\n                        <Message key={id} {...message} />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { Chat } from \"./components/Chat/Chat\";\nimport \"./styles/common.css\";\n\nconst App: React.FC = () => {\n    return <Chat />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}