{"version":3,"sources":["img/logo.png","components/Chat/withState.tsx","components/Avatar/Avatar.tsx","components/Chat/Preview/Item/Item.tsx","components/Chat/Preview/Preview.tsx","TestData.ts","components/Chat/Screen/DateSeparator/DateSeparator.tsx","components/Chat/Screen/Message/Message.tsx","components/Chat/Screen/InputForm/InputForm.tsx","components/Chat/Chat.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","WrappedComponent","Avatar","avatarUrl","userName","hide","className","src","logo","alt","Item","avatar","name","date","message","isActive","toLocaleDateString","replace","Preview","data","activeItemId","sort","a","b","getTime","map","itemData","key","id","to","randomDate","start","end","Date","Math","random","setRandomHours","h","floor","m","s","setHours","getRandomUsers","usersAmount","ceil","url","fetch","then","res","json","results","generateUsers","users","user","shortid","generate","last","first","picture","thumbnail","generateMessage","rndMsgs","length","generateGroupChat","messages","messagesAmount","messagesInDay","rndUsers","Object","assign","count","usrId","push","splice","generateChatData","chatsAmount","chats","groupChat","localUser","DateSeparator","toDateString","Message","isInRow","style","whiteSpace","toLocaleTimeString","InputForm","state","userMessage","onChange","e","setState","target","value","handleKeyDown","preventDefault","shiftKey","prevState","console","log","onSend","props","saveMessage","forceUpdate","this","autoFocus","spellCheck","placeholder","onKeyDown","disabled","onClick","React","Component","withState","activeChatId","activeChat","find","previousUser","previousDate","inRow","String","msgDate","addDateSeparator","undefined","renderChatMessages","chat","lastMessage","newMessage","currentChatId","match","params","chatId","currentChat","keys","history","isChatExist","values","App","exact","from","path","component","Chat","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.e77c2d37.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.737f1a01.png\";","import React from \"react\";\nimport { IChatGroup, IMessage } from \"./types\";\nimport { generateChatData, localUser } from \"../../TestData\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { IChatProps } from \"./Chat\";\n\nexport const withState = (\n    WrappedComponent: React.ComponentType<IChatProps>\n) => {\n    interface IState {\n        chats: Record<string, IChatGroup>;\n    }\n    interface IMatchParams {\n        chatId: string;\n    }\n    // eslint-disable-next-line react/display-name\n    return class extends React.Component<\n        RouteComponentProps<IMatchParams> & IChatProps,\n        IState\n    > {\n        readonly state: IState = {\n            chats: {},\n        };\n        componentDidMount() {\n            const { chats } = this.state;\n            if (Object.keys(chats).length === 0) {\n                generateChatData().then((data) =>\n                    this.setState({ chats: data })\n                );\n            }\n            const { match, history } = this.props;\n            const currentChatId = match.params.chatId;\n            const isChatExist = !!chats[currentChatId];\n            if (match.params.chatId && !isChatExist) {\n                history.push(\"/\");\n            }\n        }\n\n        saveMessage = (newMessage: string) => {\n            const { chats } = this.state;\n            const message: IMessage = {\n                user: localUser,\n                message: newMessage,\n                date: new Date(),\n            };\n            const { match } = this.props;\n            const currentChatId = match.params.chatId;\n            const currentChat = { ...chats[currentChatId] };\n            if (currentChat) {\n                currentChat.messages.push(message);\n                this.setState({\n                    chats: {\n                        ...chats,\n                        [currentChatId]: currentChat,\n                    },\n                });\n            }\n        };\n\n        render() {\n            const chatId = this.props.match.params.chatId ?? \"\";\n            const { chats } = this.state;\n            return (\n                <WrappedComponent\n                    activeChatId={chatId}\n                    chats={Object.values(chats)}\n                    saveMessage={this.saveMessage}\n                />\n            );\n        }\n    };\n};\n","import React from \"react\";\nimport \"./Avatar.css\";\nimport logo from \"../../img/logo.png\";\n\nexport interface IProps {\n    avatarUrl?: string;\n    userName: string;\n    hide?: boolean;\n}\n\nexport const Avatar: React.FC<IProps> = ({ avatarUrl, userName, hide }) => (\n    <img\n        className={`chat-preview-item-avatar ${hide ? \"hidden\" : \"\"}`}\n        src={avatarUrl ?? logo}\n        alt={userName}\n    />\n);\n","import React from \"react\";\nimport { Avatar } from \"../../../Avatar/Avatar\";\nimport { IChatPreviewItem } from \"./types\";\nimport \"./Item.css\";\n\ninterface IProps extends IChatPreviewItem {\n    isActive: boolean;\n}\n\nexport const Item: React.FC<IProps> = ({\n    avatar,\n    name,\n    date,\n    userName,\n    message,\n    isActive,\n}) => {\n    const style = \"flex full-width chat-preview-item \";\n    return (\n        <div\n            className={`${style} ${\n                isActive ? \"chat-preview-item-selected\" : \"\"\n            }`}\n        >\n            <Avatar avatarUrl={avatar} userName={userName} />\n            <div className=\"flex-space-between margin-left-8px chat-preview-item-text-container\">\n                <div className=\"flex-space-between margin-top-8px\">\n                    <span className=\"chat-preview-item-name\">{`${name}`}</span>\n                    <span className=\"chat-preview-item-date\">{`${date\n                        .toLocaleDateString(\"ru\")\n                        .replace(/\\./g, \"/\")}`}</span>\n                </div>\n                <div className=\"chat-preview-item-author-message margin-bottom-8px\">\n                    <span className=\"chat-preview-item-author\">{`${userName}: `}</span>\n                    <span>{`${message}`}</span>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Item } from \"./Item/Item\";\nimport { IChatPreviewItem } from \"./Item/types\";\nimport \"./Preview.css\";\n\ninterface IProps {\n    data: IChatPreviewItem[];\n    activeItemId: string;\n}\n\nexport const Preview: React.FC<IProps> = ({ data, activeItemId }) => {\n    const renderItems = () => {\n        return data\n            .sort((a, b) => b.date.getTime() - a.date.getTime())\n            .map((itemData) => (\n                <Link\n                    key={itemData.id}\n                    className=\"ignore-link-style\"\n                    to={`/chat/${itemData.id}`}\n                >\n                    <Item\n                        isActive={itemData.id === activeItemId}\n                        {...itemData}\n                    />\n                </Link>\n            ));\n    };\n    return <div className=\"flex chat-preview-list\">{renderItems()}</div>;\n};\n","import { IChatGroup, IMessage, IUser } from \"./components/Chat/types\";\nimport shortid from \"shortid\";\n\nconst randomDate = (start: Date, end: Date) => {\n    return new Date(\n        start.getTime() + Math.random() * (end.getTime() - start.getTime())\n    );\n};\n\nconst setRandomHours = (date: Date) => {\n    const h = Math.floor(Math.random() * 23);\n    const m = Math.floor(Math.random() * 59);\n    const s = Math.floor(Math.random() * 59);\n    return new Date(date.setHours(h, m, s));\n};\n\nexport interface IRandomUserName {\n    title: string;\n    first: string;\n    last: string;\n}\n\nexport interface IRandomUserIcon {\n    large: string;\n    medium: string;\n    thumbnail: string;\n}\n\nexport interface IRandomUser {\n    name: IRandomUserName;\n    picture: IRandomUserIcon;\n}\n\nconst getRandomUsers = () => {\n    const usersAmount = Math.ceil(Math.random() * 10);\n    const url = `https://randomuser.me/api/?results=${usersAmount}&inc=name,picture&noinfo`;\n    return fetch(url)\n        .then((res) => res.json())\n        .then((json) => json.results);\n};\n\nconst generateUsers = async () => {\n    const users = await getRandomUsers();\n    return users.map((user: IRandomUser) => ({\n        id: shortid.generate(),\n        userName: `${user.name.last} ${user.name.first}`,\n        avatar: user.picture.thumbnail,\n    }));\n};\n\nconst generateMessage = async (\n    user: IUser,\n    rndMsgs: string[],\n    date: Date\n): Promise<IMessage> => {\n    const message = rndMsgs[Math.floor(Math.random() * rndMsgs.length)];\n    return {\n        user: user,\n        message: message,\n        date: setRandomHours(date),\n    };\n};\n\nconst generateGroupChat = async (\n    users: IUser[],\n    rndMsgs: string[]\n): Promise<IChatGroup> => {\n    const messages: IMessage[] = [];\n    const messagesAmount = Math.ceil(25 + Math.random() * 5);\n    const messagesInDay = Math.ceil(2 + Math.random() * 4);\n    let rndUsers = Object.assign([], users);\n    let date = randomDate(new Date(2019, 0, 0), new Date());\n    for (let count = 0; count < messagesAmount; count++) {\n        const usrId = Math.floor(Math.random() * rndUsers.length);\n        if (count % messagesInDay === 0) {\n            date = randomDate(new Date(2019, 0, 0), new Date());\n        }\n        messages.push(await generateMessage(rndUsers[usrId], rndMsgs, date));\n        if (rndUsers.length === 1) {\n            rndUsers = Object.assign([], users);\n        } else {\n            rndUsers.splice(usrId, 1);\n        }\n    }\n    return {\n        id: shortid.generate(),\n        name: \"Group Chat\",\n        messages: messages.sort((a, b) => a.date.getTime() - b.date.getTime()),\n    };\n};\n\nconst getRandomText = () => {\n    const url = `https://baconipsum.com/api/?type=all-meat&paras=25&start-with-lorem=1`;\n    return fetch(url)\n        .then((res) => res.json())\n        .then((json) => json);\n};\n\nexport const generateChatData = async (): Promise<\n    Record<string, IChatGroup>\n> => {\n    const rndMsgs = await getRandomText();\n    const users = await generateUsers();\n    const chatsAmount = Math.ceil(10 + Math.random() * 10);\n    const chats: Record<string, IChatGroup> = {};\n    for (let count = 0; count < chatsAmount; count++) {\n        const groupChat = await generateGroupChat(users, rndMsgs);\n        chats[groupChat.id] = groupChat;\n    }\n    return chats;\n};\n\nexport const localUser: IUser = {\n    id: shortid.generate(),\n    userName: \"User Name\",\n};\n","import React from \"react\";\nimport \"./DateSeparator.css\";\n\ninterface IProps {\n    date: Date;\n}\n\nexport const DateSeparator: React.FC<IProps> = ({ date }) => (\n    <div className=\"screen-msg-date\">{date.toDateString()}</div>\n);\n","import React from \"react\";\nimport { Avatar } from \"../../../Avatar/Avatar\";\nimport { IMessageItem } from \"./types\";\nimport \"./Message.css\";\n\ninterface IProps extends IMessageItem {\n    isInRow: boolean;\n}\n\nexport const Message: React.FC<IProps> = ({\n    avatar,\n    user,\n    message,\n    date,\n    isInRow,\n}) => {\n    return (\n        <div\n            className={`flex ${\n                isInRow ? \"screen-message-in-row-item\" : \"screen-message-item\"\n            }`}\n        >\n            <Avatar\n                avatarUrl={avatar}\n                userName={user.userName}\n                hide={isInRow}\n            />\n            <div className=\"margin-left-8px full-width flex screen-message-text\">\n                <span\n                    className={\n                        isInRow\n                            ? \"hidden screen-message-in-row-name\"\n                            : \"chat-preview-item-name\"\n                    }\n                >\n                    {`${user.userName}`}\n                </span>\n                <div\n                    className={`${\n                        isInRow ? \"\" : \"margin-top-8px\"\n                    } flex-space-between`}\n                >\n                    <div style={{ whiteSpace: \"pre-wrap\" }}>{`${message}`}</div>\n                    <span className=\"margin-left-8px chat-preview-item-date\">\n                        {date.toLocaleTimeString(\"ru\")}\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\nimport \"./InputForm.css\";\n\ninterface IProps {\n    hide?: boolean;\n    saveMessage: (newMessage: string) => void;\n}\n\ninterface IState {\n    userMessage: string;\n}\n\nexport class InputForm extends React.Component<IProps, IState> {\n    readonly state: IState = {\n        userMessage: \"\",\n    };\n\n    private onChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        this.setState({ userMessage: e.target.value });\n    };\n\n    private handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        const { key } = e;\n        if (key === \"Enter\") {\n            e.preventDefault();\n            if (e.shiftKey) {\n                this.setState((prevState) => ({\n                    userMessage: `${prevState.userMessage}\\n`,\n                }));\n                console.log(this.state.userMessage);\n                return;\n            } else {\n                return this.onSend();\n            }\n        }\n    };\n\n    private onSend = () => {\n        const { userMessage } = this.state;\n        if (userMessage.length === 0) {\n            return;\n        }\n        this.props.saveMessage(userMessage);\n        this.setState({ userMessage: \"\" });\n        this.forceUpdate();\n    };\n\n    render() {\n        const { hide } = this.props;\n        const { userMessage } = this.state;\n        return (\n            <div className={`flex chat-screen-input ${hide ? \"hidden\" : \"\"}`}>\n                <textarea\n                    autoFocus\n                    spellCheck\n                    className=\"chat-screen-input-form\"\n                    placeholder=\"Please write a message...\"\n                    onChange={this.onChange}\n                    onKeyDown={this.handleKeyDown}\n                    value={userMessage}\n                />\n                <button\n                    disabled={userMessage.length === 0}\n                    className=\"margin-left-8px chat-screen-send-buttom\"\n                    onClick={this.onSend}\n                >\n                    SEND\n                </button>\n            </div>\n        );\n    }\n}\n","import React, { Fragment } from \"react\";\nimport { Preview } from \"./Preview/Preview\";\nimport { IChatGroup, IMessage } from \"./types\";\nimport { IChatPreviewItem } from \"./Preview/Item/types\";\nimport \"./Chat.css\";\nimport { withState } from \"./withState\";\nimport { DateSeparator } from \"./Screen/DateSeparator/DateSeparator\";\nimport { Message } from \"./Screen/Message/Message\";\nimport { InputForm } from \"./Screen/InputForm/InputForm\";\n\nexport interface IChatProps {\n    chats: IChatGroup[];\n    activeChatId: string;\n    saveMessage: (newMessage: string) => void;\n}\n\nconst Chat: React.FC<IChatProps> = ({ chats, activeChatId, saveMessage }) => {\n    const preparePreviewData = (): IChatPreviewItem[] => {\n        return chats.map((chat) => {\n            const lastMessage = chat.messages[chat.messages.length - 1];\n            return {\n                id: chat.id,\n                avatar: lastMessage.user.avatar,\n                name: chat.name,\n                userName: lastMessage.user.userName,\n                ...(lastMessage as Omit<IMessage, \"user\">),\n            };\n        });\n    };\n    const renderChatMessages = () => {\n        const activeChat = chats.find(({ id }) => id === activeChatId);\n        const messages = activeChat ? activeChat.messages : [];\n        let previousUser = \"\";\n        let previousDate: number = new Date(0).setHours(0, 0, 0, 0);\n        return messages.map((message) => {\n            const inRow = String(previousUser) === message.user.id;\n            previousUser = message.user.id;\n            const msgDate = new Date(message.date).setHours(0, 0, 0, 0);\n            const addDateSeparator = previousDate !== msgDate;\n            previousDate = msgDate;\n            return (\n                <Fragment key={`${message.date.getTime()}`}>\n                    {addDateSeparator ? (\n                        <DateSeparator date={message.date} />\n                    ) : undefined}\n                    <Message\n                        avatar={message.user.avatar}\n                        isInRow={!addDateSeparator && inRow}\n                        {...message}\n                    />\n                </Fragment>\n            );\n        });\n    };\n\n    const messages = renderChatMessages();\n    return (\n        <div className=\"flex chat\">\n            <Preview data={preparePreviewData()} activeItemId={activeChatId} />\n            <div className=\"flex chat-screen\">\n                <div className=\"flex chat-screen-messages\">{messages}</div>\n                <InputForm\n                    hide={messages.length === 0}\n                    saveMessage={saveMessage}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default withState(Chat);\n","import React from \"react\";\nimport \"./styles/common.css\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport Chat from \"./components/Chat/Chat\";\n\nconst App: React.FC = () => {\n    return (\n        <Switch>\n            <Redirect exact from=\"/\" to=\"/chat\" />\n            <Redirect from=\"/react-messenger\" to=\"/chat\" />\n            <Route exact path=\"/chat\" component={Chat} />\n            <Route path=\"/chat/:chatId\" component={Chat} />\n        </Switch>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}