{"version":3,"sources":["TestData.ts","components/Chat/Preview/Item/Avatar/Avatar.tsx","components/Chat/Preview/Item/Item.tsx","components/Chat/Preview/Preview.tsx","components/Chat/Screen/Message/Message.tsx","components/Chat/Chat.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getRandomUsers","usersAmount","Math","ceil","random","url","fetch","then","res","json","results","generateMessage","user","rndMsgs","a","message","floor","length","icon","picture","thumbnail","author","name","last","first","date","start","Date","end","getTime","generateGroupChat","users","messages","messagesAmount","rndUsers","Object","assign","count","usrId","push","splice","sort","b","generateChatData","chatsAmount","chats","Avatar","avatarUrl","userName","className","src","alt","Item","isActive","selectItem","onClick","toLocaleDateString","replace","Preview","renderItems","props","data","activeItem","map","itemData","id","key","this","React","Component","Message","Chat","state","activeChat","selectChat","chatId","setState","preparePreviewData","chat","undefined","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.74565282.chunk.js","sourcesContent":["const randomDate = (start: Date, end: Date) => {\n    return new Date(\n        start.getTime() + Math.random() * (end.getTime() - start.getTime())\n    );\n};\n\nexport interface IChatPreviewItem {\n    icon: string;\n    name: string;\n    date: Date;\n    author: string;\n    message: string;\n}\n\nexport interface IRandomUserName {\n    title: string;\n    first: string;\n    last: string;\n}\n\nexport interface IRandomUserIcon {\n    large: string;\n    medium: string;\n    thumbnail: string;\n}\n\nexport interface IRandomUser {\n    name: IRandomUserName;\n    picture: IRandomUserIcon;\n}\n\nconst getRandomUsers = () => {\n    const usersAmount = Math.ceil(Math.random() * 10);\n    const url = `https://randomuser.me/api/?results=${usersAmount}&inc=name,picture&noinfo`;\n    return fetch(url)\n        .then((res) => res.json())\n        .then((json) => json.results);\n};\n\nexport interface IMessage {\n    icon: string;\n    author: string;\n    message: string;\n    date: Date;\n}\n\nexport interface IChatGroup {\n    name: string;\n    messages: IMessage[];\n}\n\nconst generateMessage = async (\n    user: IRandomUser,\n    rndMsgs: string[]\n): Promise<IMessage> => {\n    const message = rndMsgs[Math.floor(Math.random() * rndMsgs.length)];\n    return {\n        icon: user.picture.thumbnail,\n        author: `${user.name.last} ${user.name.first}`,\n        message: message,\n        date: randomDate(new Date(2019, 0, 1), new Date()),\n    };\n};\n\nconst generateGroupChat = async (\n    users: IRandomUser[],\n    rndMsgs: string[]\n): Promise<IChatGroup> => {\n    const messages: IMessage[] = [];\n    const messagesAmount = Math.ceil(25 + Math.random() * 5);\n    let rndUsers = Object.assign([], users);\n    for (let count = 0; count < messagesAmount; count++) {\n        const usrId = Math.floor(Math.random() * rndUsers.length);\n        messages.push(await generateMessage(rndUsers[usrId], rndMsgs));\n        if (rndUsers.length === 1) {\n            rndUsers = Object.assign([], users);\n        } else {\n            rndUsers.splice(usrId, 1);\n        }\n    }\n    return {\n        name: \"Group Chat\",\n        messages: messages.sort((a, b) => a.date.getTime() - b.date.getTime()),\n    };\n};\n\nconst getRandomText = () => {\n    const url = `https://baconipsum.com/api/?type=all-meat&paras=25&start-with-lorem=1`;\n    return fetch(url)\n        .then((res) => res.json())\n        .then((json) => json);\n};\n\nexport const generateChatData = async (): Promise<IChatGroup[]> => {\n    const rndMsgs = await getRandomText();\n    const users = await getRandomUsers();\n    const chatsAmount = Math.ceil(10 + Math.random() * 10);\n    const chats: IChatGroup[] = [];\n    for (let count = 0; count < chatsAmount; count++) {\n        chats.push(await generateGroupChat(users, rndMsgs));\n    }\n    return chats;\n};\n","import React from \"react\";\nimport \"./Avatar.css\";\n\nexport interface IProps {\n    avatarUrl: string;\n    userName: string;\n}\n\nexport const Avatar: React.FC<IProps> = ({ avatarUrl, userName }) => {\n    return (\n        <img\n            className=\"chat-preview-item-avatar\"\n            src={avatarUrl}\n            alt={userName}\n        />\n    );\n};\n","import React from \"react\";\nimport \"./Item.css\";\nimport { Avatar } from \"./Avatar/Avatar\";\nimport { IChatPreviewItem } from \"../../../../TestData\";\n\ninterface IProps extends IChatPreviewItem {\n    isActive: boolean;\n    selectItem: () => void;\n}\n\nexport const Item: React.FC<IProps> = ({\n    icon,\n    name,\n    date,\n    author,\n    message,\n    isActive,\n    selectItem,\n}) => {\n    const onClickItem = () => {\n        selectItem();\n    };\n\n    const style = \"flex full-width chat-preview-item \";\n    return (\n        <div\n            className={`${style} ${\n                isActive ? \"chat-preview-item-selected\" : \"\"\n            }`}\n            onClick={onClickItem}\n        >\n            <Avatar avatarUrl={icon} userName={author} />\n            <div className=\"flex-space-between margin-left-8px chat-preview-item-text-container\">\n                <div className=\"flex-space-between margin-top-8px\">\n                    <span className=\"chat-preview-item-name\">{`${name}`}</span>\n                    <span className=\"chat-preview-item-date\">{`${date\n                        .toLocaleDateString(\"ru\")\n                        .replace(/\\./g, \"/\")}`}</span>\n                </div>\n                <div className=\"chat-preview-item-author-message margin-bottom-8px\">\n                    <span className=\"chat-preview-item-author\">{`${author}: `}</span>\n                    <span>{`${message}`}</span>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Item } from \"./Item/Item\";\nimport \"./Preview.css\";\nimport { IChatPreviewItem } from \"../../../TestData\";\n\ninterface IProps {\n    data: IChatPreviewItem[];\n    activeItem: number;\n    selectItem: (itemId: number) => void;\n}\n\nexport class Preview extends React.Component<IProps> {\n    private renderItems = () => {\n        const { data, selectItem, activeItem } = this.props;\n        return data.map((itemData, id) => (\n            <Item\n                key={id}\n                isActive={id === activeItem}\n                selectItem={() => selectItem(id)}\n                {...itemData}\n            />\n        ));\n    };\n    render() {\n        return (\n            <div className=\"flex chat-preview-list\">{this.renderItems()}</div>\n        );\n    }\n}\n","import React from \"react\";\nimport { IMessage } from \"../../../../TestData\";\nimport { Avatar } from \"../../Preview/Item/Avatar/Avatar\";\nimport \"./Message.css\";\n\ninterface IProps extends IMessage {}\n\nexport const Message: React.FC<IProps> = ({ icon, author, message, date }) => {\n    return (\n        <div className=\"flex screen-message-item\">\n            <Avatar avatarUrl={icon} userName={author} />\n            <div className=\"margin-left-8px full-width flex screen-message-text\">\n                <span className=\"chat-preview-item-name\">{`${author}`}</span>\n                <div className=\"margin-top-8px flex-space-between\">\n                    <span>{`${message}`}</span>\n                    <span className=\"chat-preview-item-date\">{`${date\n                        .toLocaleDateString(\"ru\")\n                        .replace(/\\./g, \"/\")}`}</span>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { generateChatData, IChatGroup, IChatPreviewItem } from \"../../TestData\";\nimport { Preview } from \"./Preview/Preview\";\nimport { Message } from \"./Screen/Message/Message\";\nimport \"./Chat.css\";\n\ninterface IState {\n    chats: IChatGroup[];\n    activeChat: number;\n}\n\nexport class Chat extends React.Component<{}, IState> {\n    readonly state: IState = {\n        chats: [],\n        activeChat: -1,\n    };\n\n    private selectChat = (chatId: number) => {\n        this.setState({ activeChat: chatId });\n    };\n\n    componentDidMount() {\n        generateChatData().then((chats) => this.setState({ chats: chats }));\n    }\n\n    private preparePreviewData = (): IChatPreviewItem[] => {\n        const { chats } = this.state;\n        const data = chats.map((chat) => {\n            return {\n                name: chat.name,\n                ...chat.messages[chat.messages.length - 1],\n            };\n        });\n        return data.sort((a, b) => b.date.getTime() - a.date.getTime());\n    };\n\n    render() {\n        const { chats, activeChat } = this.state;\n        const messages =\n            activeChat >= 0 && chats.length > 0\n                ? chats[activeChat].messages\n                : undefined;\n        return (\n            <div className=\"flex chat\">\n                <Preview\n                    data={this.preparePreviewData()}\n                    activeItem={activeChat}\n                    selectItem={this.selectChat}\n                />\n                <div className=\"flex chat-screen\">\n                    {messages &&\n                        messages.map((message, id) => (\n                            <Message key={id} {...message} />\n                        ))}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { Chat } from \"./components/Chat/Chat\";\nimport \"./styles/common.css\";\n\nconst App: React.FC = () => {\n    return <Chat />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}